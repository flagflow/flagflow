name: Build and Push Docker Image

on:
  push:
    paths:
      - package.json
    branches:
      - main

jobs:
  build:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch the last 2 commits to access HEAD~1

      # Setup Node.js to detect version changes
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      # Extract and compare versions
      - name: Detect version change
        id: detect_version
        run: |
          # Get the current and previous versions from package.json
          CURRENT_VERSION=$(jq -r '.version' package.json)
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r '.version')

          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version upgraded from $PREVIOUS_VERSION to $CURRENT_VERSION."
            echo "version_changed=true" >> $GITHUB_ENV
            echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          else
            echo "No version upgrade detected."
          fi

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        if: env.version_changed == 'true'
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        if: env.version_changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Multi-platform
      - name: Build and push Docker image
        if: env.version_changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/flagflow:${{ env.CURRENT_VERSION }}

      # Run Trivy vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ghcr.io/${{ github.repository }}/flagflow:${{ env.CURRENT_VERSION }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      # Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
