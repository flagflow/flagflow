name: demo

services:
  flagflow:
    image: ghcr.io/flagflow/flagflow:1.4.6
    deploy:
      replicas: 4
    init: true
    networks:
      - flagflow_network
    environment:
      ETCD_SERVER: etcd:2379
      ETCD_USERNAME: root
      ETCD_PASSWORD: flagflow
      SESSION_USERS_ENABLED: false
      ENVIRONMENT: DEMO
    healthcheck:
      test: 'curl -s -I http://localhost:3000/health | head -n 1 | grep 200'
      interval: 15s
      timeout: 10s
      retries: 2
    restart: on-failure
    depends_on:
      etcd:
        condition: service_healthy

  nginx:
    image: nginx:1.29.0-alpine3.22
    configs:
      - source: nginx_config
        target: /etc/nginx/conf.d/default.conf
    volumes:
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    ports:
      - 80:80
      - 443:443
    networks:
      - flagflow_network
    healthcheck:
      test: 'curl -s -I http://localhost/health | head -n 1 | grep 200'
      interval: 15s
      timeout: 10s
      retries: 2
    restart: on-failure
    depends_on:
      flagflow:
        condition: service_healthy

  certbot:
    image: certbot/certbot:v3.3.0
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    profiles:
      - exclude
    restart: no

  etcd:
    image: bitnami/etcd:3.6.4-debian-12-r2
    networks:
      - flagflow_network
    environment:
      ETCD_ROOT_PASSWORD: flagflow
    volumes:
      - etcd_data:/etcd-data
    healthcheck:
      test: ['CMD', 'etcdctl', '--user=root:flagflow', 'endpoint', 'health']
      interval: 15s
      timeout: 10s
      retries: 2
    restart: on-failure

networks:
  flagflow_network:

volumes:
  etcd_data:

configs:
  nginx_config:
    content: |
      server {
          listen 80;

          server_name demo.flagflow.net;
          server_tokens off;

          add_header X-Frame-Options DENY always;
          add_header X-Content-Type-Options nosniff always;

          location /.well-known/acme-challenge/ {
              root /var/www/certbot;
          }
          location /health {
              access_log off;
              default_type text/plain;
              return 200 "ok";
          }
          location / {
              return 301 https://$$server_name$$request_uri;
          }
      }
      server {
          listen 443 ssl;
          http2 on;

          server_name demo.flagflow.net;
          server_tokens off;

          ssl_certificate /etc/nginx/ssl/live/demo.flagflow.net/fullchain.pem;
          ssl_certificate_key /etc/nginx/ssl/live/demo.flagflow.net/privkey.pem;

          ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
          ssl_session_cache shared:SSL:10m;
          ssl_session_timeout 1d;
          ssl_session_tickets off;

          ssl_stapling on;
          ssl_stapling_verify on;
          ssl_trusted_certificate /etc/nginx/ssl/live/demo.flagflow.net/chain.pem;
          resolver 8.8.8.8 8.8.4.4 valid=300s;
          resolver_timeout 5s;

          add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
          add_header X-Frame-Options DENY always;
          add_header X-Content-Type-Options nosniff always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header Referrer-Policy "strict-origin-when-cross-origin" always;
          add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; connect-src 'self' https://api.iconify.design" always;

          gzip on;
          gzip_vary on;
          gzip_min_length 1024;
          gzip_proxied any;
          gzip_comp_level 6;
          gzip_types
              text/plain
              text/css
              text/xml
              text/javascript
              application/json
              application/javascript
              application/xml+rss
              application/atom+xml
              image/svg+xml;

          location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|avif|woff|woff2|ttf|eot)$ {
              expires 1d;
              add_header Cache-Control "public, immutable";
              proxy_pass http://flagflow:3000;
              proxy_cache_bypass $$http_pragma;
              proxy_cache_revalidate on;
          }

          location / {
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;

              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://flagflow:3000;
              proxy_connect_timeout 30s;
              proxy_send_timeout 30s;
              proxy_read_timeout 30s;
              proxy_buffering off;
          }
      }
